# =============================================================================
# RipCatch - AI-Powered Rip Current Detection System
# Modern Python Project Configuration
# =============================================================================

[build-system]
requires = ["setuptools>=65.0", "wheel", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

# =============================================================================
# Project Metadata
# =============================================================================

[project]
name = "ripcatch"
version = "2.0.0"
description = "AI-powered rip current detection system using YOLOv8"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sravan Kumar (naga-narala)", email = "sravankumar.nnv@gmail.com"}
]
maintainers = [
    {name = "Sravan Kumar", email = "sravankumar.nnv@gmail.com"}
]
keywords = [
    "rip-current",
    "detection",
    "yolov8",
    "computer-vision",
    "deep-learning",
    "beach-safety",
    "pytorch",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "ultralytics>=8.0.0",
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "PyYAML>=6.0",
    "tqdm>=4.65.0",
    "Pillow>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
]
export = [
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "onnxruntime-gpu>=1.15.0",
]
all = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "onnxruntime-gpu>=1.15.0",
]

[project.urls]
Homepage = "https://github.com/naga-narala/RipCatch"
Documentation = "https://github.com/naga-narala/RipCatch/wiki"
Repository = "https://github.com/naga-narala/RipCatch"
Issues = "https://github.com/naga-narala/RipCatch/issues"
Changelog = "https://github.com/naga-narala/RipCatch/blob/main/CHANGELOG.md"

[project.scripts]
ripcatch-detect = "ripcatch.cli:detect_cli"
ripcatch-train = "ripcatch.cli:train_cli"

# =============================================================================
# Tool Configuration - Black (Code Formatter)
# =============================================================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
  | \.ipynb_checkpoints
)/
'''

# =============================================================================
# Tool Configuration - isort (Import Sorter)
# =============================================================================

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", "venv", "build", "dist", "__pycache__"]

# =============================================================================
# Tool Configuration - mypy (Type Checker)
# =============================================================================

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "cv2.*",
    "torch.*",
    "torchvision.*",
]
ignore_missing_imports = true

# =============================================================================
# Tool Configuration - pytest (Testing)
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--color=yes",
    "--tb=short",
    "--strict-markers",
    "--cov=ripcatch",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests requiring GPU",
    "integration: marks integration tests",
]

# =============================================================================
# Tool Configuration - coverage.py (Code Coverage)
# =============================================================================

[tool.coverage.run]
source = ["ripcatch"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
]

# =============================================================================
# Tool Configuration - setuptools
# =============================================================================

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["ripcatch*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
ripcatch = ["*.yaml", "*.yml", "*.json"]

# =============================================================================
# Tool Configuration - flake8 (via setup.cfg equivalent)
# Note: flake8 doesn't support pyproject.toml natively
# Create .flake8 file if needed
# =============================================================================

# [tool.flake8]  # Not supported, use .flake8 file
# max-line-length = 100
# extend-ignore = E203, E266, E501, W503
# max-complexity = 18
# select = B,C,E,F,W,T4,B9

# =============================================================================
# Installation Instructions
# =============================================================================

# Install package:
#   pip install -e .
#
# Install with development dependencies:
#   pip install -e .[dev]
#
# Install with all optional dependencies:
#   pip install -e .[all]
#
# Run tests:
#   pytest
#
# Format code:
#   black .
#   isort .
#
# Type check:
#   mypy ripcatch/
#
# Lint code:
#   flake8 ripcatch/

# =============================================================================

